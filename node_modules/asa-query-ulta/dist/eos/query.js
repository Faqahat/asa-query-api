"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @constant {QueryServersOptions} defaultOptions
 * @description The default options to use when querying servers.
 * @property {string} deployment_id - The deployment ID of Ark: Survival Ascended.
 * @property {string} api_endpoint - The API endpoint of Epic Games.
 * @property {number} maxResults - The maximum number of results to return. Defaults to 10.
 * These options can be overridden by passing an object to the queryServers function.
 */
const defaultOptions = {
    deployment_id: 'ad9a8feffb3b4b2ca315546f038c3ae2',
    api_endpoint: 'https://api.epicgames.dev',
    maxResults: 10,
};
/**
 * @function queryServers - Queries the matchmaking API for servers.
 * @param options - The options to use when querying servers.
 * @returns {Promise<MatchmakingResponse>} - The response from the matchmaking API.
 */
async function queryServers(options = defaultOptions) {
    options = { ...defaultOptions, ...options };
    const { deployment_id, api_endpoint, maxResults, access_token, criteria } = options;
    if (typeof access_token !== 'string' || !access_token)
        throw new Error('Invalid or missing access_token');
    if (typeof criteria !== 'object' || !criteria)
        throw new Error('Invalid or missing criteria');
    if (maxResults === undefined)
        throw new Error('maxResults is required');
    if (criteria.length < 1)
        throw new Error('Criteria object is empty');
    let url;
    try {
        url = new URL(`/matchmaking/v1/${deployment_id}/filter`, api_endpoint);
    }
    catch (e) {
        throw new Error('Invalid API endpoint');
    }
    const headers = {
        Authorization: `Bearer ${access_token}`,
        'Content-Type': 'application/json',
        Accept: 'application/json',
    };
    const body = JSON.stringify({
        criteria,
        maxResults,
    });
    let res;
    try {
        res = await fetch(url.toString(), {
            method: 'POST',
            headers,
            body,
        });
    }
    catch (e) {
        throw new Error('Network error occurred');
    }
    if (!res.ok)
        throw new Error('Invalid response from server');
    let json;
    try {
        json = await res.json();
        if (!Array.isArray(json.sessions))
            throw new Error('Invalid sessions');
        if (typeof json.count !== 'number')
            throw new Error('Invalid count');
    }
    catch (e) {
        throw new Error('Error parsing JSON response');
    }
    return json;
}
exports.default = queryServers;
//# sourceMappingURL=query.js.map