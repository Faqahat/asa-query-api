import { CriterionKey, MatchmakingResponse } from './eos/query';
import { GetAccessTokenOptions } from './eos/token';
/**
 * @class AsaQuery
 * @description A class for building queries to the Ark: Survival Ascended matchmaking API.
 * @example - Query for official servers with a name that contains '2142'
 * const query = new AsaQuery();
 * const response = query
 *   .official()
 *   .serverNameContains('2142')
 *   .exec();
 * console.log(response);
 */
declare class AsaQuery {
    private criteria;
    private maxResults;
    private access_token;
    private token_expires;
    /**
     * addCriteria allows you to add a custom criterion to the query.
     * @param key - The key of the criterion to add.
     * @param op - The operator to use when comparing the value.
     * @param value - The value to compare against.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *   .addCriteria(
     *     'attributes.CUSTOMSERVERNAME_s',
     *     'EQUAL',
     *     'NA-PVP-TheIsland2142')
     *   .exec();
     * console.log(response);
     */
    addCriteria(key: CriterionKey, op: 'EQUAL' | 'NOT_EQUAL' | 'CONTAINS', value: string | number | boolean): this;
    /**
     * serverName allows you to query for servers with a specific name.
     * @param name - The exact name of the server to query for.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *  .serverName('NA-PVP-TheIsland2142')
     *  .exec();
     * console.log(response);
     */
    serverName(name: string): this;
    /**
     * serverNameContains allows you to query for servers with a name that contains a specific string.
     * @param name - The string to query for.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *  .serverNameContains('2142')
     *  .exec();
     * console.log(response);
     */
    serverNameContains(name: string): this;
    /**
     * official allows you to query for official servers only, excluding unofficial servers.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *   .official()
     *   .exec();
     * console.log(response);
     */
    official(): this;
    /**
     * unofficial allows you to query for unofficial servers only, excluding official servers.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *  .unofficial()
     *  .exec();
     * console.log(response);
     */
    unofficial(): this;
    /**
     * serverId allows you to query for a specific server by ID.
     * @param id - The Epic Server ID of the server to query for.
     * @returns {AsaQuery} - The AsaQuery instance.
     * to make use of this, call exec() after calling this function.
     * @example
     * const query = new AsaQuery();
     * const response = query
     *   .serverId('69ee7eab580f43eeb904527d439b8fae')
     *   .exec();
     * console.log(response);
     */
    serverId(id: string): this;
    max(max: number): this;
    /**
     * getToken allows you to manually grab an access token from the API.
     * This is useful if you wish to use your own credentials.
     * If this isn't called, exec() will call this and grab a default token.
     * @param options - The options to use when grabbing the token.
     */
    getToken(options?: GetAccessTokenOptions): Promise<void>;
    /**
     * exec executes the query and returns the response.
     * If getToken() hasn't been called, it will call it with default options.
     * If you wish to use your own credentials, call getToken() manually.
     * @throws {Error} - If no criteria are provided.
     * @returns {Promise<MatchmakingResponse>} - The response from the EOS API.
     */
    exec(): Promise<MatchmakingResponse>;
}
export = AsaQuery;
//# sourceMappingURL=main.d.ts.map